//
//  PriceEsitmate.m
//  UberAPI
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
//
#import "PriceEsitmate.h"

@implementation PriceEsitmate

/**
* ISO 4217 currency code.
*/
@synthesize currencyCode;

/**
* Display name of product.
*/
@synthesize displayName;

/**
* Expected activity distance (in miles).
*/
@synthesize distance;

/**
* Expected activity duration (in seconds). Always show duration in minutes.
*/
@synthesize duration;

/**
* Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
*/
@synthesize estimate;

/**
* Upper bound of the estimated price.
*/
@synthesize highEstimate;

/**
* Lower bound of the estimated price.
*/
@synthesize lowEstimate;

/**
* Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
*/
@synthesize productId;

/**
* Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
*/
@synthesize surgeMultiplier;



/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"currency_code": @"currencyCode",
        @"display_name": @"displayName",
        @"distance": @"distance",
        @"duration": @"duration",
        @"estimate": @"estimate",
        @"high_estimate": @"highEstimate",
        @"low_estimate": @"lowEstimate",
        @"product_id": @"productId",
        @"surge_multiplier": @"surgeMultiplier"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end